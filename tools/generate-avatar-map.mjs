import { readFile, writeFile } from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const CSV_PATH = path.join(__dirname, "..", "data", "akyo-data.csv");
const OUTPUT_PATH = path.join(__dirname, "..", "data", "akyo-avatar-map.js");

function parseCsv(text) {
  const rows = [];
  let row = [];
  let field = "";
  let inQuotes = false;
  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    if (inQuotes) {
      if (char === '"') {
        if (text[i + 1] === '"') {
          field += '"';
          i++;
        } else {
          inQuotes = false;
        }
      } else {
        field += char;
      }
      continue;
    }

    if (char === '"') {
      inQuotes = true;
      continue;
    }

    if (char === ",") {
      row.push(field);
      field = "";
      continue;
    }

    if (char === "\n") {
      row.push(field);
      rows.push(row);
      row = [];
      field = "";
      continue;
    }

    if (char === "\r") {
      if (text[i + 1] === "\n") {
        continue;
      }
      row.push(field);
      rows.push(row);
      row = [];
      field = "";
      continue;
    }

    field += char;
  }

  if (field.length || row.length) {
    row.push(field);
    rows.push(row);
  }

  return rows;
}

function threeDigits(value) {
  const num = String(value ?? "").trim();
  if (!/^\d+$/.test(num)) return null;
  return num.padStart(3, "0");
}

function extractAvtr(url) {
  if (!url) return null;
  const match = String(url).match(/avtr_[A-Za-z0-9-]+/);
  return match ? match[0].toLowerCase() : null;
}

async function main() {
  const csv = await readFile(CSV_PATH, "utf8");
  const rows = parseCsv(csv);
  if (!rows.length) throw new Error("CSV is empty");

  const header = rows.shift();
  const avatarUrlIndex = header
    ? header.findIndex((h) => h.includes("URL"))
    : -1;

  const map = new Map();

  for (const row of rows) {
    if (!row.length) continue;
    const id = threeDigits(row[0]);
    if (!id) continue;
    const url = avatarUrlIndex >= 0 ? row[avatarUrlIndex] : row[row.length - 1];
    const avtr = extractAvtr(url);
    if (!avtr) continue;
    map.set(avtr, id);
  }

  const sorted = Array.from(map.entries()).sort((a, b) => {
    if (a[1] === b[1]) return a[0].localeCompare(b[0]);
    return Number(a[1]) - Number(b[1]);
  });

  const objectLiteral = sorted.reduce((acc, [avtr, id]) => {
    acc[avtr] = id;
    return acc;
  }, {});

  const content =
    "// Auto-generated by tools/generate-avatar-map.mjs\n" +
    "// Do not edit manually.\n" +
    `export const AVATAR_ID_BY_AVTR = ${JSON.stringify(objectLiteral, null, 2)};\n` +
    "export default AVATAR_ID_BY_AVTR;\n";

  await writeFile(OUTPUT_PATH, content, "utf8");
  console.log(
    `Wrote ${sorted.length} entries to ${path.relative(process.cwd(), OUTPUT_PATH)}`
  );
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
